///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace Web_DashBoard.Record_Actions.Panel
{
    public partial class CheckColorSelected
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void GetBGColor(Ranorex.Adapter tdTagToInspect)  
        {  
            TdTag tdTagElmt = tdTagToInspect.Element;  
            var bgColor = tdTagElmt.GetStyle("background-color");  
            Regex regExp = new Regex(@"\((\d{1,3}), (\d{1,3}), (\d{1,3})\)");  
            MatchCollection matchCol = regExp.Matches(bgColor);  
            if (matchCol.Count >=1)  
            {  
                Match[] rgbArray = new Match[matchCol.Count];  
                matchCol.CopyTo(rgbArray, 0);  
                int rCol = int.Parse(rgbArray[0].Groups[1].Value);  
                int gCol = int.Parse(rgbArray[0].Groups[2].Value);  
                int bCol = int.Parse(rgbArray[0].Groups[3].Value);  
                string hexColor = "#"+HexFromRGB(rCol, gCol, bCol);  
            }  
        }  
  
        private string HexFromRGB(int r, int g, int b)  
        {  
            return ColorTranslator.FromHtml(String.Format("#{0:X2}{1:X2}{2:X2}", r, g, b)).Name.Remove(0,2);  
        }  
        
        
        public void CheckElementColor(string modColors)
        {
        	Report.Log(ReportLevel.Info,"Validate","Validate Color added ["+modColors+"]");
        	if (modColors!="") {
        		string[] varColors = modColors.Split(',');
        		int loops = varColors.Length;
        		for (int i = 0; i < loops; i++) {
        			int varRow = i + 2;       			
        			
        			InputTag txtColor = "//table[@id='tblThreshold']//tr["+ varRow +"]//input[@id='txtColor']";        		      			
        			string currentColor = txtColor.Element.GetAttributeValueText("background-color"); 
        			Report.Log(ReportLevel.Info,currentColor);
        			//Validate.AreEqual(currentColor,varColors[i]);
        		}
        	}        	
        }

    }
}
