///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace Web_DashBoard.Record_Actions.Panel
{
    public partial class EnterIndicatorSetting
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void AddCriteria(string modPanelCriterias)
        {           
        	Report.Log(ReportLevel.Info,"Add Criterias: " + modPanelCriterias);
        	if (modPanelCriterias!="") {
        		if (modPanelCriterias.Split(',').Length==1) {
        			repo.Dashboard.TblThreshold.txtCriteria.Element.SetAttributeValue("Value",modPanelCriterias.Split('-')[0]);
        			repo.Dashboard.TblThreshold.TxtColor.Click();
        			repo.Dashboard.ColorPickerTable.SelfInfo.WaitForExists(5000);
        			TdTag varPickedColor = "//table[@id='colorPickerTable']//td[@title~'"+modPanelCriterias.Split('-')[1]+"']";
        			varPickedColor.Click();
        			repo.Dashboard.ColorPickerTable.SelfInfo.WaitForNotExists(5000);
        		} else {
        			string[] varCriterias = modPanelCriterias.Split(',');
        			for (int i = 0; i < varCriterias.Length; i++) {   
        				string varFrom = varCriterias[i].Split('-')[0];
        				string varColor = varCriterias[i].Split('-')[1];
        				int varRow = i+2;        				
        				
        				Report.Log(ReportLevel.Info,"varFrom: " + varFrom);
        				Report.Log(ReportLevel.Info,"varColor: " + varColor);
        				
        				if (i>0) {    
							int varButtonRow = i+1;        					
							ImgTag btnAdd = "//table[@id='tblThreshold']//tr["+ varButtonRow +"]//img[@id='btnAdd']";        					
							Report.Log(ReportLevel.Info,"Add one more  criteria.");
        					btnAdd.Click();
        				}
        				
        				InputTag txtFrom = "//table[@id='tblThreshold']//tr["+ varRow +"]//input[@id='criteria']";
        				InputTag txtColor = "//table[@id='tblThreshold']//tr["+ varRow +"]//input[@id='txtColor']";        				        				
        				
        				txtFrom.Element.SetAttributeValue("Value",varFrom);
        				txtColor.Click();
        				repo.Dashboard.ColorPickerTable.SelfInfo.WaitForExists(5000);
        				
        				TdTag tdPickedColor = "//table[@id='colorPickerTable']//td[@title~'"+ varColor +"']";
        				tdPickedColor.Click();
        			}
        		}
        	}
        }
    }
}
