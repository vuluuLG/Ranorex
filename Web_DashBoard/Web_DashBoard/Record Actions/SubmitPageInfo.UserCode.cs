///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace Web_DashBoard.Record_Actions
{
    public partial class SubmitPageInfo
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }        
  
        public void EnterPageName(RepoItemInfo inputtagInfo, string pageName)
        {	
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'inputtagInfo' at Center.", inputtagInfo);
            inputtagInfo.FindAdapter<InputTag>().Click();
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$pageName' with focus on 'inputtagInfo'.", inputtagInfo);
            Web_DashBoardRepository myRepo = new Web_DashBoardRepository();
            myRepo.Dashboard.AddPage.txtName.Element.SetAttributeValue("Value", pageName);
        }

        public void SelectParentPage(RepoItemInfo selecttagInfo, string parentPage)
        {
        	if (parentPage!="") {
        		Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$parentPage' on item 'selecttagInfo'.", selecttagInfo);
            selecttagInfo.FindAdapter<SelectTag>().Element.SetAttributeValue("TagValue", parentPage);
        	}            
        }

        public void SelectNumberOfColumn(RepoItemInfo selecttagInfo, string value)
        {
        	if (value!="") {
        		Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$numberOfColumn' on item 'selecttagInfo'.", selecttagInfo);
            selecttagInfo.FindAdapter<SelectTag>().Element.SetAttributeValue("TagValue", numberOfColumn);
        	}            
        }

        public void SelectDisplayAfterPage(RepoItemInfo selecttagInfo, string value)
        {
        	if (value!="") {
        		Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$displayAfter' on item 'selecttagInfo'.", selecttagInfo);
            selecttagInfo.FindAdapter<SelectTag>().Element.SetAttributeValue("TagValue", displayAfter);
        	}            
        }

        public void SetIsPublic(RepoItemInfo inputtagInfo, string value)
        {
        		Report.Log(ReportLevel.Info, "Set value", "Setting attribute Checked to '$isPublic' on item 'inputtagInfo'.", inputtagInfo);
            inputtagInfo.FindAdapter<InputTag>().Element.SetAttributeValue("Checked", isPublic);
        	            
        }

    }
}
