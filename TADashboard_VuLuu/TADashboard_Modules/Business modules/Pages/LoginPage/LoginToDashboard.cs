///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace TADashboard_Modules.Business_modules.Pages.LoginPage
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The LoginToDashboard recording.
    /// </summary>
    [TestModule("bce4dce4-f4c8-4bdf-b67e-9c6bd888c6f7", ModuleType.Recording, 1)]
    public partial class LoginToDashboard : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::TADashboard_Modules.TADashboard_Repository repository.
        /// </summary>
        public static global::TADashboard_Modules.TADashboard_Repository repo = global::TADashboard_Modules.TADashboard_Repository.Instance;

        static LoginToDashboard instance = new LoginToDashboard();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public LoginToDashboard()
        {
            modUsername = "";
            modPassword = "";
            modDashboardRepo = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static LoginToDashboard Instance
        {
            get { return instance; }
        }

#region Variables

        string _modUsername;

        /// <summary>
        /// Gets or sets the value of variable modUsername.
        /// </summary>
        [TestVariable("372d446b-1945-49b5-83ff-ea1828c4793f")]
        public string modUsername
        {
            get { return _modUsername; }
            set { _modUsername = value; }
        }

        string _modPassword;

        /// <summary>
        /// Gets or sets the value of variable modPassword.
        /// </summary>
        [TestVariable("b147142b-a86d-4f2c-9d4e-905f842027d9")]
        public string modPassword
        {
            get { return _modPassword; }
            set { _modPassword = value; }
        }

        string _modDashboardRepo;

        /// <summary>
        /// Gets or sets the value of variable modDashboardRepo.
        /// </summary>
        [TestVariable("8e74dbf4-3423-4ed7-b47f-0ff8cfe4a6ea")]
        public string modDashboardRepo
        {
            get { return _modDashboardRepo; }
            set { _modDashboardRepo = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 0;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 0.00;

            Init();

            Helper_modules.ControlExtension.SelectByText(repo.TADashboard.Pages.LoginPage.CbxRepositoryInfo, modDashboardRepo);
            
            Helper_modules.ControlExtension.InputText(repo.TADashboard.Pages.LoginPage.TxtUsernameInfo, modUsername);
            
            Helper_modules.ControlExtension.InputText(repo.TADashboard.Pages.LoginPage.TxtPasswordInfo, modPassword);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TADashboard.Pages.LoginPage.BtnLogin' at Center.", repo.TADashboard.Pages.LoginPage.BtnLoginInfo, new RecordItemIndex(3));
            repo.TADashboard.Pages.LoginPage.BtnLogin.Click();
            
            try {
                Report.Log(ReportLevel.Info, "Wait", "(Optional Action)\r\nWaiting 30s to exist. Associated repository item: 'TADashboard.Pages.ExecutionDashboardPage'", repo.TADashboard.Pages.ExecutionDashboardPage.SelfInfo, new ActionTimeout(30000), new RecordItemIndex(4));
                repo.TADashboard.Pages.ExecutionDashboardPage.SelfInfo.WaitForExists(30000);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
